@page
@using Google.Apis.Calendar.v3.Data
@model IndexModel
@{
    ViewData["Title"] = "Kalender og billeder";
}

<div class="page-container">
    <div id="cc" class="calendar-container">
        <div id="calendarContainer">
            <!-- Calendar will be populated by JavaScript -->
        </div>

        <div class="timed-container">
            <div class="week-container" id="weekContainer">
                <!-- Timed events will be populated by JavaScript -->
            </div>
            <div class="time-container">
                <div class="hour">
                    <div class="vertical-bar"></div>
                </div>
                <!-- Hours will be dynamically generated by JavaScript -->
            </div>
        </div>
    </div>

    <div class="image-displayer">
        <div class="image-div">
            <img id="randomImage" src="" alt="Random Image" style="width: 500px; height: auto;">
        </div>
        <div class="fileName">
            <p id="fileName"></p>
        </div>
    </div>
</div>

<script>
    // Function to fetch calendar data
    async function fetchCalendar() {
        try {
            const response = await fetch('/api/calendar');
            if (!response.ok) {
                throw new Error('Failed to fetch calendar data');
            }
            const data = await response.json();
            if (data.type === 'calendar') {

                const days = data.content;
                const calendarContainer = document.getElementById('calendarContainer');
                const weekContainer = document.getElementById('weekContainer');
                calendarContainer.innerHTML = '';
                weekContainer.innerHTML = '';

                if (!days || days.length === 0) {
                    calendarContainer.innerHTML = `<p>Error: No calendar data available. Please contact support.</p>`;
                    return;
                }

                const weekHeaderContainer = document.createElement('div');
                weekHeaderContainer.classList.add('week-header-container');

                for(let i = 0; i < days.length; i++) {
                    const day = days[i];

                    const dayName = new Date(day.date).toLocaleDateString('da-DK', { weekday: 'long' });
                    const capitalizedDay = dayName.charAt(0).toUpperCase() + dayName.slice(1);

                    const dayContainer = document.createElement('div');
                    dayContainer.classList.add('day-container');

                    const dayHeader = document.createElement('div');
                    dayHeader.classList.add('day-header');
                    dayHeader.innerHTML = `<strong>${capitalizedDay} - ${new Date(day.date).toLocaleDateString('da-DK', { day: '2-digit', month: 'numeric' })}</strong>`;
                    dayContainer.appendChild(dayHeader);

                    day.events.forEach(eventItem => {
                        if (eventItem.isFullDayEvent) {
                            const eventElement = document.createElement('div');
                            eventElement.classList.add('full-day-event-item');
                            eventElement.style.backgroundColor = eventItem.color?.background || '#f0f0f0';
                            eventElement.innerHTML = `<strong>${eventItem.title}</strong>`;
                            dayContainer.appendChild(eventElement);
                        }
                    });
                    weekHeaderContainer.appendChild(dayContainer);
                }

                calendarContainer.appendChild(weekHeaderContainer);

                // Populate timed events
                const containerHeight = weekContainer.offsetHeight;
                days.forEach(day => {
                    const dayTimedContainer = document.createElement('div');
                    dayTimedContainer.classList.add('day-container');



                    const eventList = [];
                    day.events.forEach(eventItem => {
                        if (!eventItem.isFullDayEvent) {
                            let startTime = new Date(eventItem.startTime);
                            let endTime = new Date(eventItem.endTime);
                            let found = false;
                            eventList.forEach(eventGroup => {
                                const OtherStartTime = new Date(eventGroup.startTime);
                                if (startTime.getTime() === OtherStartTime.getTime()) {
                                    eventGroup.events.push(eventItem);
                                    if (eventGroup.endTime.getTime() < endTime.getTime()) {
                                        eventGroup.endTime = endTime;
                                    }
                                    found = true;
                                }
                            });
                            if (found == false) {
                                eventList.push({startTime: startTime, endTime: endTime, events: [eventItem]});
                            }
                        }
                    });


                    eventList.forEach(eventGroup => {
                        const eventItem1 = eventGroup.events[0];
                        if (eventGroup.events.length > 1) {
                            const timedEventGroup = document.createElement('div');

                            let startTime = new Date(eventGroup.startTime);
                            let endTime = new Date(eventGroup.endTime);

                            let startInMinutes = (startTime.getHours() * 60) + startTime.getMinutes();
                            let endInMinutes = (endTime.getHours() * 60) + endTime.getMinutes();

                            const topPosition = (startInMinutes / 1440.0) * (containerHeight - containerHeight / 24);
                            const bottomPosition = (endInMinutes / 1440.0) * (containerHeight - containerHeight / 24);
                            const diff = bottomPosition - topPosition;

                            timedEventGroup.classList.add('day-event-group');

                            timedEventGroup.style.border = "1px black solid";
                            timedEventGroup.style.width = "calc(100% - 14px)";
                            timedEventGroup.style.top = `${topPosition}px`;
                            timedEventGroup.style.minHeight = `${(diff-6)}px`;

                            timedEventGroup.innerHTML = "<span>" + new Date(eventItem1.startTime).toLocaleTimeString('da-DK', { hour: '2-digit', minute: '2-digit' }) + "-" + new Date(eventItem1.endTime).toLocaleTimeString('da-DK', { hour: '2-digit', minute: '2-digit' }) + " | </span>" +
                            "<strong>" + eventGroup.events.length + " events... </strong>";

                            eventGroup.events.forEach(eventItem => {
                                const timedEventElement = document.createElement('div');
                                timedEventElement.classList.add('day-event-item');

                                timedEventElement.style.backgroundColor = eventItem.color?.background || '#f0f0f0';
                                timedEventElement.innerHTML = `<strong>${eventItem.title}</strong><span> - ${eventItem.calenderName}</span><br><span>${new Date(eventItem.startTime).toLocaleTimeString('da-DK', { hour: '2-digit', minute: '2-digit' })} - ${new Date(eventItem.endTime).toLocaleTimeString('da-DK', { hour: '2-digit', minute: '2-digit' })}</span>`;
                                timedEventGroup.appendChild(timedEventElement);
                            });

                            dayTimedContainer.appendChild(timedEventGroup);
                        }
                        else {
                            const timedEventElement = document.createElement('div');

                            let startTime = new Date(eventItem1.startTime);
                            let endTime = new Date(eventItem1.endTime);

                            let startInMinutes = (startTime.getHours() * 60) + startTime.getMinutes();
                            let endInMinutes = (endTime.getHours() * 60) + endTime.getMinutes();

                            const topPosition = (startInMinutes / 1440.0) * (containerHeight - containerHeight / 24);
                            const bottomPosition = (endInMinutes / 1440.0) * (containerHeight - containerHeight / 24);
                            const diff = bottomPosition - topPosition;

                            timedEventElement.classList.add('day-event-group');

                            timedEventElement.style.top = `${topPosition}px`;
                            timedEventElement.style.minHeight = `${(diff-6)}px`;
                            timedEventElement.style.backgroundColor = eventItem1.color?.background || '#f0f0f0';

                            timedEventElement.innerHTML = `<strong>${eventItem1.title}</strong><span> - ${eventItem1.calenderName}</span><br><span>${new Date(eventItem1.startTime).toLocaleTimeString('da-DK', { hour: '2-digit', minute: '2-digit' })} - ${new Date(eventItem1.endTime).toLocaleTimeString('da-DK', { hour: '2-digit', minute: '2-digit' })}</span>`;
                            
                            dayTimedContainer.appendChild(timedEventElement);
                        }
                    });

                    weekContainer.appendChild(dayTimedContainer);
                });
            } else if (data.type === 'authentication') {


                const cc = document.getElementById('cc');
                const validationContainer = document.createElement('div');
                    validationContainer.innerHTML = `
                    <span>Use this code in the link bellow<span><br>
                    <strong>${data.content.user_code}</strong><br>
                    <a href="${data.content.url}">${data.content.url}</a>
                    `;
                
                cc.appendChild(validationContainer);
            }

        } catch (error) {
            console.error('Error fetching calendar data:', error);
        }
    }

    function initializeTimeContainer() {
        const timeContainer = document.querySelector('.time-container');
        for (let i = 1; i < 25; i++) {
            const hourBlock = document.createElement('div');
            hourBlock.classList.add('hour');

            const hourTime = document.createElement('div');
            hourTime.classList.add('hour-time');
            hourTime.innerHTML = `<span>${i}:00</span>`;

            const verticalBar = document.createElement('div');
            verticalBar.classList.add('vertical-bar');

            hourBlock.appendChild(hourTime);
            hourBlock.appendChild(verticalBar);
            timeContainer.appendChild(hourBlock);
        }
    }

    function fetchRandomImage() {
        const imageElement = document.getElementById('randomImage');
        const fileNameElement = document.getElementById('fileName');
        imageElement.style.opacity = 0;

        fetch('/api/random_image')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                const { fileName, contentType, imageData } = data;
                const imageSrc = `data:${contentType};base64,${imageData}`;

                setTimeout(() => {
                    imageElement.src = imageSrc;
                    fileNameElement.textContent = fileName;

                    imageElement.onload = () => {
                        imageElement.style.opacity = 1;
                    };
                }, 1500);
            })
            .catch(error => {
                console.error('Error fetching the image:', error);
            });
    }

    // Initialize
    fetchCalendar();
    initializeTimeContainer();
    setInterval(fetchRandomImage, 14000);
    fetchRandomImage();
</script>
