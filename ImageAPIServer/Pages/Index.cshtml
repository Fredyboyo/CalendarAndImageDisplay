@page
@using Google.Apis.Calendar.v3.Data
@using CalendarAndImageDisplay.Model;
@model IndexModel
@{
    ViewData["Title"] = "Kalender og billeder";
}

<header class="header">
    <div class="headerElement">
        <button id="tb" class="toggleButton" onclick="toggleCalendar()">
            Switch to image display
        </button>
    </div>
    @if (Model.AuthenticationNeeded)
    {
        <div class="headerElement">
            Authentication is needed for calendar to work. Copy this code: @(Model.UserCode) an proceed <a href="@(Model.VerificationUrl)">here</a>
        </div>
    }
    
</header>
<div class="page-container">
    <div id="cc" class="calendarContainer">
        <div class="calendarContainerDayHeaders">
            @foreach(Day day in Model.Days)
            {
                <div class="calendarContainerDayHeader">
                    <span>
                        @(@day.Date.ToString("dddd", new System.Globalization.CultureInfo("da-DK")).Substring(0, 1).ToUpper()
                        + @day.Date.ToString("dddd", new System.Globalization.CultureInfo("da-DK")).Substring(1).ToLower())
                    </span>
                </div>
            }
        </div>
        <div class="calendarContainerForWeekOfAllDayEvents">
            @foreach (Day day in Model.Days)
            {
                Dictionary<DateTime, List<DayEvent>> eventGroups = [];
                List<DayEvent> allDayEvents = [];
                foreach (DayEvent dayEvent in day.Events)
                {
                    if (dayEvent.IsFullDayEvent)
                    {
                        allDayEvents.Add(dayEvent);
                    }
                    else
                    {
                        if (eventGroups.TryGetValue(dayEvent.StartTime, out List<DayEvent>? group))
                        {
                            group.Add(dayEvent);
                        }
                        else
                        {
                            eventGroups.Add(dayEvent.StartTime, [dayEvent]);
                        }
                    }
                }
                <div class="calendarContainerForAllDayEvents">
                    @foreach (DayEvent dayEvent in day.Events)
                    {
                        if (dayEvent.IsFullDayEvent)
                        {
                            <div class="allDayEvent" style="background-color: @(dayEvent.Color?.Background)99;">
                                <span>
                                    @dayEvent.Title
                                </span>
                            </div>
                        }
                    }
                </div>
            }
        </div>
        <div id="TimedEvents" class="calendarContainerForWeekOfAllTimedEvents">
            <div class="hours">
                @for (int i = 0; i < 25; i++)
                {
                    <div class="hour">
                        <div class="hour-time">
                            <span>@i:00</span>
                        </div>
                        <div class="vertical-bar"></div>
                    </div>
                }
            </div>
            <div class="events">
                @foreach (Day day in Model.Days)
                {
                    Dictionary<DateTime, EventGroup> eventGroups = [];
                    List<DayEvent> allDayEvents = [];
                    foreach (DayEvent dayEvent in day.Events)
                    {
                        if (dayEvent.IsFullDayEvent)
                        {
                            allDayEvents.Add(dayEvent);
                        }
                        else
                        {
                            if (eventGroups.TryGetValue(dayEvent.StartTime, out EventGroup? group))
                            {
                                group.Add(dayEvent);
                            }
                            else
                            {
                                group = new EventGroup(dayEvent);
                                eventGroups.Add(dayEvent.StartTime, group);
                            }
                        }
                    }
                    <div class="calendarContainerForTimedEvents">
                        @foreach (DateTime startTime in eventGroups.Keys)
                        {
                            EventGroup eventGroup = eventGroups[startTime];
                            double startTimeInMinutes = eventGroup.StartTime.TimeOfDay.TotalMinutes / 60;
                            double endTimeInMinutes = eventGroup.EndTime.TimeOfDay.TotalMinutes / 60;
                            int dynamicHeight = (int)(endTimeInMinutes - startTimeInMinutes) * 48;
                            <div class="timedEvent" style="top: @(startTimeInMinutes * 48 + 12)px; height: @(dynamicHeight)px;" onmouseover="adjustHeight(this, @dynamicHeight)" onmouseout="resetHeight(this, @dynamicHeight)">
                                @foreach (DayEvent dayEvent in eventGroup.Events)
                                {
                                    string baseColor = dayEvent.Color?.Background ?? "#3498db"; // Default to a blue if null
                                    <div class="innerEventBody" style="background: @(baseColor); ">
                                        <span>
                                            <b>@dayEvent.Title</b>, @dayEvent.CalendarName
                                            <br />
                                            @dayEvent.StartTime.ToShortTimeString() - @dayEvent.EndTime.ToShortTimeString()
                                        </span>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        </div>


    </div>

    <div id="id" class="image-displayer" style="display: none;">
        <div class="image-div">
            <img id="randomImage" src="" alt="Random Image">
        </div>
        <div class="subContainers">
            <span id="fileName"></span>
        </div>
        <div class="subContainers">
            <button class="imageControlButton" onclick="showPreviousImage()">Back</button>
            <button id="pauseButton" class="imageControlButton" onclick="togglePause()">Pause</button>
            <button class="imageControlButton" onclick="showNextImage()">Next</button>
            <button class="imageControlButton" onclick="increaseSpeed()">Increase Speed</button>
            <button class="imageControlButton" onclick="decreaseSpeed()">Decrease Speed</button>
            <div id="speedDisplay" class="imageControlButton"></div>
        </div>
        <div class="subContainers">
            <div class="memoryCircles">
                <div onclick="showImageAt(0)" class="memoryCircle"></div>
                <div onclick="showImageAt(1)" class="memoryCircle"></div>
                <div onclick="showImageAt(2)" class="memoryCircle"></div>
                <div onclick="showImageAt(3)" class="memoryCircle"></div>
                <div onclick="showImageAt(4)" class="memoryCircle"></div>
                <div class="memoryRing"></div>
            </div>
        </div>
        <div class="subContainers">
            <div id="progressBar"></div>
        </div>
    </div>
</div>


<script src="~/js/Calendar.js"></script>